using <|NAMESPACE|>.EntityLayer;
{|REMOVE_WHEN:IsAutoIncrement|}
using <|NAMESPACE|>.DataLayer;
{|END_REMOVE|}
using <|NAMESPACE|>.ViewModelLayer;
using PDSC.Common;
using Microsoft.AspNetCore.Mvc;

namespace <|NAMESPACE|>.Controllers;

public class <|CLASS_NAME|><|OUTPUT_SUFFIX|> : Controller
{
  {|REMOVE_WHEN:IsAutoIncrement|}
  public <|CLASS_NAME|><|OUTPUT_SUFFIX|>(IRepository<<|PK_LANGUAGE_DATA_TYPE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search> repo, 
    {|FOR EACH FK_TABLE|}
    IRepository<<|PK_LANGUAGE_DATA_TYPE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search> <|CLASS_NAME_SINGULAR_ALL_LOWER|>Repo,
    {|END_LOOP|}
    <|DB_CONTEXT|> dbContext)
  {
    _Repo = repo;
    _DbContext = dbContext;
    {|FOR EACH FK_TABLE|}
    <|PRIVATE_FIELD_PREFIX|><|CLASS_NAME_SINGULAR|>Repo = <|CLASS_NAME_SINGULAR_ALL_LOWER|>Repo;
    {|END_LOOP|}
  }
  {|END_REMOVE|}
  {|REMOVE_WHEN:IsNotAutoIncrement|}
  public <|CLASS_NAME|><|OUTPUT_SUFFIX|>(IRepository<<|PK_LANGUAGE_DATA_TYPE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search> repo
    {|FOR EACH FK_TABLE|}
    ,IRepository<<|PK_LANGUAGE_DATA_TYPE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search> <|CLASS_NAME_SINGULAR_ALL_LOWER|>Repo
    {|END_LOOP|}
  )
  {
    _Repo = repo;
    {|FOR EACH FK_TABLE|}
    <|PRIVATE_FIELD_PREFIX|><|CLASS_NAME_SINGULAR|>Repo = <|CLASS_NAME_SINGULAR_ALL_LOWER|>Repo;
    {|END_LOOP|}
  }
  {|END_REMOVE|}

  private readonly IRepository<<|PK_LANGUAGE_DATA_TYPE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search> _Repo;
  {|REMOVE_WHEN:IsAutoIncrement|}
  private readonly <|DB_CONTEXT|> _DbContext;
  {|END_REMOVE|}
  {|REMOVE_WHEN:NoForeignKeys|}
  // Foreign Key Variables
  {|END_REMOVE|}  
  {|FOR EACH FK_TABLE|}
  private IRepository<<|PK_LANGUAGE_DATA_TYPE|>, <|CLASS_NAME|>, <|CLASS_NAME|>Search>? <|PRIVATE_FIELD_PREFIX|><|CLASS_NAME_SINGULAR|>Repo;
  {|END_LOOP|}

  [HttpGet]
  public async Task<IActionResult> <|CLASS_NAME|>Index()
  {
    // Create view model, passing in repository
    <|CLASS_NAME|>ViewModel vm = new(_Repo);
    {|REMOVE_WHEN:NoForeignKeys|}
    // Set Foreign Key Repositories
    {|END_REMOVE|} 
    {|FOR EACH FK_TABLE|}
    vm.<|CLASS_NAME_SINGULAR|>Repository = <|PRIVATE_FIELD_PREFIX|><|CLASS_NAME_SINGULAR|>Repo;
    {|END_LOOP|}

    // Call method to load <|CLASS_NAME|> objects
    await vm.GetAsync();

    return View(vm);
  }

  [HttpPost]
  public async Task<IActionResult> <|CLASS_NAME|>Index(<|CLASS_NAME|>ViewModel vm)
  {
    vm.Repository = _Repo;
    {|REMOVE_WHEN:NoForeignKeys|}
    // Set Foreign Key Repositories
    {|END_REMOVE|} 
    {|FOR EACH FK_TABLE|}
    vm.<|CLASS_NAME_SINGULAR|>Repository = <|PRIVATE_FIELD_PREFIX|><|CLASS_NAME_SINGULAR|>Repo;
    {|END_LOOP|}

    if (ModelState.IsValid)
    {
      // Save the <|CLASS_NAME|>
      await vm.SaveAsync();

      // Redirect back to <|CLASS_NAME|> list
      return RedirectToAction("<|CLASS_NAME|>Index");
    }
    else
    {
      vm.IsDetailVisible = true;

      return View(vm);
    }
  }

  [HttpGet]
  public async Task<IActionResult> <|CLASS_NAME|>Search(<|CLASS_NAME|>ViewModel vm)
  {
    vm.Repository = _Repo;
    {|REMOVE_WHEN:NoForeignKeys|}
    // Set Foreign Key Repositories
    {|END_REMOVE|} 
    {|FOR EACH FK_TABLE|}
    vm.<|CLASS_NAME_SINGULAR|>Repository = <|PRIVATE_FIELD_PREFIX|><|CLASS_NAME_SINGULAR|>Repo;
    {|END_LOOP|}

    // Call method to search for <|CLASS_NAME|> objects
    await vm.SearchAsync();

    return View("<|CLASS_NAME|>Index", vm);
  }
    
  [HttpGet]
  public async Task<IActionResult> <|CLASS_NAME|>Edit(<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|> id)
  {
    // Create view model, passing in repository
    <|CLASS_NAME|>ViewModel vm = new(_Repo);
    {|REMOVE_WHEN:NoForeignKeys|}
    // Set Foreign Key Repositories
    {|END_REMOVE|} 
    {|FOR EACH FK_TABLE|}
    vm.<|CLASS_NAME_SINGULAR|>Repository = <|PRIVATE_FIELD_PREFIX|><|CLASS_NAME_SINGULAR|>Repo;
    {|END_LOOP|}

    // Call method to load a single <|CLASS_NAME|> object
    await vm.GetAsync(id);
    
    {|REMOVE_WHEN:NoForeignKeys|}
    // Load Foreign Keys
    {|END_REMOVE|}
    {|FOR EACH FK_TABLE|}
    await vm.Load<|CLASS_NAME_PLURAL|>Async();
    {|END_LOOP|}

    return View("<|CLASS_NAME|>Index", vm);
  }

  [HttpGet]
  public async Task<IActionResult> <|CLASS_NAME|>Add()
  {
    // Create view model, passing in repository
    <|CLASS_NAME|>ViewModel vm = new(_Repo)
    {
      IsDetailVisible = true,
      IsAdding = true
    };
    {|REMOVE_WHEN:NoForeignKeys|}
    // Set Foreign Key Repositories
    {|END_REMOVE|} 
    {|FOR EACH FK_TABLE|}
    vm.<|CLASS_NAME_SINGULAR|>Repository = <|PRIVATE_FIELD_PREFIX|><|CLASS_NAME_SINGULAR|>Repo;
    {|END_LOOP|}

    // Call method to create an empty <|CLASS_NAME|> object
    vm.CurrentEntity = vm.CreateEmpty();
    {|REMOVE_WHEN:IsAutoIncrementOrIsPrimaryKeyNotInteger|}
    // Assign next id to generate
    vm.CurrentEntity.<|PK_PROPERTY_NAME|> = GetNextId();
    {|END_REMOVE|}
    
    {|REMOVE_WHEN:NoForeignKeys|}
    // Load Foreign Keys
    {|END_REMOVE|}
    {|FOR EACH FK_TABLE|}
    await vm.Load<|CLASS_NAME_PLURAL|>Async();
    {|END_LOOP|}

    return View("<|CLASS_NAME|>Index", vm);
  }

  {|REMOVE_WHEN:IsAutoIncrementOrIsPrimaryKeyNotInteger|}
  private int GetNextId()
  {  
    return _DbContext.<|CLASS_NAME_PLURAL|>.Max(row => row.<|PK_PROPERTY_NAME|>) + 1;
  }
  {|END_REMOVE|}

  [HttpGet]
  public async Task<IActionResult> <|CLASS_NAME|>Delete(<|PK_LANGUAGE_DATA_TYPE_NEVER_NULLABLE|> id)
  {
    // Create view model, passing in repository
    <|CLASS_NAME|>ViewModel vm = new(_Repo);
    {|REMOVE_WHEN:NoForeignKeys|}
    // Set Foreign Key Repositories
    {|END_REMOVE|} 
    {|FOR EACH FK_TABLE|}
    vm.<|CLASS_NAME_SINGULAR|>Repository = <|PRIVATE_FIELD_PREFIX|><|CLASS_NAME_SINGULAR|>Repo;
    {|END_LOOP|}

    // Call method to delete a single <|CLASS_NAME|> object
    await vm.DeleteAsync(id);

    return RedirectToAction("<|CLASS_NAME|>Index");
  }
}