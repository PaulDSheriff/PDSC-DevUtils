using System.Collections.ObjectModel;
using System.Net;
using System.Windows.Input;
using <|NAMESPACE|>.EntityLayer;
using <|NAMESPACE|>.MAUI.Views;
using <|NAMESPACE|>.ViewModelLayer;
using Microsoft.Extensions.Logging;
using PDSC.Common;

namespace <|NAMESPACE|>.MAUI.CommandClasses
{
  public class <|CLASS_NAME|>ViewModelCommands : <|CLASS_NAME|>ViewModel
  {
    #region Constructors
    public <|CLASS_NAME|>ViewModelCommands(<|REPOSITORY_INTERFACE|> repository) : base(repository)
    {
    }

    public <|CLASS_NAME|>ViewModelCommands(<|REPOSITORY_INTERFACE|> repository,
    {|FOR EACH FK_TABLE|}
      IRepository<<|NAMESPACE|>.EntityLayer.<|CLASS_NAME|>, <|CLASS_NAME|>Search> <|CLASS_NAME_SINGULAR_ALL_LOWER|>Repo,
    {|END_LOOP|}
      ILogger<<|CLASS_NAME|>ViewModel> logger) : base(repository, <|FK_REPOSITORIES_CONSTRUCTOR|> logger)
    {
    }       
    #endregion
    
    #region Public Properties
    {|REMOVE_WHEN:net7.0|}
    public <|CLASS_NAME|>ListView? TheView { get; set; }
    {|END_REMOVE|}
    {|REMOVE_WHEN:net8.0|}
    public <|CLASS_NAME|>ListView TheView { get; set; }
    {|END_REMOVE|}
    #endregion

    #region Commands
    {|REMOVE_WHEN:net7.0|}
    public ICommand? GetCommand { get; private set; }
    public ICommand? SearchCommand { get; private set; }
    public ICommand? AddCommand { get; private set; }
    public ICommand? EditCommand { get; private set; }
    public ICommand? DeleteCommand { get; private set; }
    public ICommand? SaveCommand { get; private set; }
    public ICommand? CancelCommand { get; private set; }
    {|END_REMOVE|}
    {|REMOVE_WHEN:net8.0|}
    public ICommand GetCommand { get; private set; }
    public ICommand SearchCommand { get; private set; }
    public ICommand AddCommand { get; private set; }
    public ICommand EditCommand { get; private set; }
    public ICommand DeleteCommand { get; private set; }
    public ICommand SaveCommand { get; private set; }
    public ICommand CancelCommand { get; private set; }
    {|END_REMOVE|}
    #endregion

    #region Init Method
    public override void Init()
    {
      base.Init();

      // Initialize Commands
      GetCommand = new Command(async () => await GetAllAsync(), () => true);
      SearchCommand = new Command(async () => await SearchAsync(), () => true);
      AddCommand = new Command(async () => await AddAsync(), () => true);
      EditCommand = new Command<<|PK_LANGUAGE_DATA_TYPE|>>(async (<|PK_LANGUAGE_DATA_TYPE|> id) => await EditAsync(id), (id) => true);
      DeleteCommand = new Command<<|PK_LANGUAGE_DATA_TYPE|>>(async (<|PK_LANGUAGE_DATA_TYPE|> id) => await DeleteAsync(id), (id) => true);
      SaveCommand = new Command(async () => await SaveAsync(), () => true);
      CancelCommand = new Command(async () => await CancelAsync(), () => true);
    }
    #endregion
        
    #region GetAllAsync Method
    protected async Task GetAllAsync()
    {
      SearchEntity = new();
      await base.GetAsync();
    }
    #endregion

    #region SearchAsync Method
    protected new async Task SearchAsync()
    {
      DataResponse<ObservableCollection<<|NAMESPACE|>.EntityLayer.<|CLASS_NAME|>>> response = await base.SearchAsync(SearchEntity);
      if (response != null && response.StatusCode == HttpStatusCode.OK) {
        InfoMessage = $"Searched and Found: {(response.Data ?? new()).Count} {ClassDescriptionPlural}";
      }
    }
    #endregion

    #region CancelAsync Method
    protected async Task CancelAsync()
    {      
      await Shell.Current.GoToAsync("..");
    }
    #endregion

    #region AddAsync Method
    protected async Task AddAsync()
    {
      {|REMOVE_WHEN:IsPrimaryKeyGuid|}
      await Shell.Current.GoToAsync($"{nameof(Views.<|CLASS_NAME|>DetailView)}?id={NextId}&isAdding={true}");
      {|END_REMOVE|}
      {|REMOVE_WHEN:IsPrimaryKeyNotGuid|}
      Guid guid = Guid.NewGuid();
      await Shell.Current.GoToAsync($"{nameof(Views.<|CLASS_NAME|>DetailView)}?id={guid}&isAdding={true}");
      {|END_REMOVE|}
    }
    #endregion

    #region EditAsync Method
    protected async Task EditAsync(<|PK_LANGUAGE_DATA_TYPE|> id)
    {
      await Shell.Current.GoToAsync($"{nameof(Views.<|CLASS_NAME|>DetailView)}?id={id.ToString()}&isAdding={false}");
    }
    #endregion

    #region SaveAsync Method
    public async override Task<DataResponse<<|NAMESPACE|>.EntityLayer.<|CLASS_NAME|>>> SaveAsync()
    {
      DataResponse<<|NAMESPACE|>.EntityLayer.<|CLASS_NAME|>> response = await base.SaveAsync();

      if (response.StatusCode == HttpStatusCode.Created ||
          response.StatusCode == HttpStatusCode.OK) {
        await Shell.Current.GoToAsync("..");
      }

      return response;
    }
    #endregion

    #region DeleteAsync Method
    protected new async Task DeleteAsync(<|PK_LANGUAGE_DATA_TYPE|> id)
    {
      if (TheView != null) {
        // Ask user for confirmation
        string action = await TheView.DisplayActionSheet("Delete this <|CLASS_NAME_SINGULAR|>?", "Cancel", "Delete");
        switch (action) {
          case "Delete":
            // Perform delete
            DataResponse<<|NAMESPACE|>.EntityLayer.<|CLASS_NAME|>> response = await base.DeleteAsync(id);
            if (response != null && response.StatusCode == HttpStatusCode.NoContent) {
              InfoMessage = "<|CLASS_NAME_SINGULAR|> Deleted";
            }

            // Redisplay list
            await GetAsync();
            break;
          default:
            break;
        }
      }
    }
    #endregion
  }
}
