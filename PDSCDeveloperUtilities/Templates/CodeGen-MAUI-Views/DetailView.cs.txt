using <|NAMESPACE|>.MAUI.CommandClasses;

namespace <|NAMESPACE|>.MAUI.Views;

[QueryProperty(nameof(<|PK_PROPERTY_NAME|>), "id")]
[QueryProperty(nameof(IsAdding), "isAdding")]
public partial class <|CLASS_NAME|>DetailView : ContentPage
{
  public <|CLASS_NAME|>DetailView(<|CLASS_NAME|>ViewModelCommands viewModel)
  {
    InitializeComponent();

    ViewModel = viewModel;
  }

  private readonly <|CLASS_NAME|>ViewModelCommands ViewModel;
  public <|PK_LANGUAGE_DATA_TYPE|> <|PK_PROPERTY_NAME|> { get; set; } <|PROPERTY_INITIALIZER_STATEMENT|>
  public bool IsAdding { get; set; }

  protected async override void OnAppearing()
  {
    base.OnAppearing();

    BindingContext = ViewModel;

    ViewModel.IsAdding = IsAdding;
    if (IsAdding) {
      ViewModel.CurrentEntity = ViewModel.CreateEmpty();
      {|REMOVE_WHEN:IsAutoIncrementOrIsPrimaryKeyNotInteger|}
      ViewModel.CurrentEntity.<|PK_PROPERTY_NAME|> = ViewModel.NextId;
      {|END_REMOVE|}
    }
    else {
      // Load a Single Record
      await ViewModel.GetAsync(<|PK_PROPERTY_NAME|>);
    }

    {|REMOVE_WHEN:NoForeignKeys|}
    // Get Data for all Foreign Keys
    {|END_REMOVE|}
    {|FOR EACH FK_TABLE|}
    await ViewModel.Load<|CLASS_NAME_PLURAL|>Async();
    {|END_LOOP|}

    {|REMOVE_WHEN:NoForeignKeys|}
    // If Adding and after loading ratings, set default FK properties
    if (IsAdding && ViewModel.CurrentEntity != null) {
    {|END_REMOVE|}
    {|FOR EACH FK_TABLE|}
      ViewModel.CurrentEntity.<|PK_TABLE_PK_PROPERTY_NAME|> = ViewModel.Selected<|CLASS_NAME_SINGULAR|>?.<|PK_PROPERTY_NAME|> ?? <|PK_PROPERTY_INITIALIZER|>;
    {|END_LOOP|}
    {|REMOVE_WHEN:NoForeignKeys|}
    }
    {|END_REMOVE|}
  }
}